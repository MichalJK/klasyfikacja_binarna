[
  {
    "objectID": "info.html",
    "href": "info.html",
    "title": "info",
    "section": "",
    "text": "Jest to przykład klasyfikacji binarnej NB (Naive Bayes) i KNN (K Neareast Neighbors) w Pythonie.\nRaport został wykonany w Quarto (Jupyter) w RStudio."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Binary classification",
    "section": "",
    "text": "Binary classification is the classification of data into one of two categories. This assignment is the result of an algorithm that examines the structure of the database. In the case of the Naive Bayes method, the algorithm is based on Bayes’ theorem of conditional probability. The K-Nearest Neighbours (KNN) algorithm classifies new data based on its similarity to data in the database. This similarity is measured by the distance between two defined categories.\nThe ‘mtcars’ database was chosen as the basis for the operation."
  },
  {
    "objectID": "index.html#practice-base-data",
    "href": "index.html#practice-base-data",
    "title": "Binary classification",
    "section": "Practice base ‘data’",
    "text": "Practice base ‘data’\n\n\nCode\n# Column selection\ndata = mtcars[['mpg', 'vs']]\n\nshow(data, layout={\"topStart\": None, \"topEnd\": None},scrollY=\"300px\", scrollCollapse=True, paging=False)\n\n\n\n\n\n\n\n    \n      \n      mpg\n      vs\n    \n    \n      rownames\n      \n      \n    \n  \n\n\n\n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\n\n\nLoading ITables v2.2.3 from the init_notebook_mode cell...\n(need help?)\n\n\n\n\n\n\n\nTable 3: Practice database ‘data’\n\n\n\n\n80% of the database ‘data’ records were drawn for learning the model, while 20% were kept for testing and estimating its quality. The drawing was done without repetition."
  },
  {
    "objectID": "index.html#training-data-train",
    "href": "index.html#training-data-train",
    "title": "Binary classification",
    "section": "Training data ‘train’",
    "text": "Training data ‘train’\n\n\nCode\nnp.random.seed(7)\n\n#Training database index selection\nindex = np.random.choice(data.index, size=int(0.8 * len(data)), replace=False)\n\n\n# Training data 'train'\ntrain = data.loc[index]\n\n# Converting 'vs' into a categorical variable\ntrain['vs'] = train['vs'].astype('category')\n\nshow(train, layout={\"topStart\": None, \"topEnd\": None},scrollY=\"300px\", scrollCollapse=True, paging=False)\n\n\n\n\n\n\n\n    \n      \n      mpg\n      vs\n    \n    \n      rownames\n      \n      \n    \n  \n\n\n\n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\n\n\nLoading ITables v2.2.3 from the init_notebook_mode cell...\n(need help?)\n\n\n\n\n\n\n\nTable 4: Training database ‘train’"
  },
  {
    "objectID": "index.html#testing-data-test",
    "href": "index.html#testing-data-test",
    "title": "Binary classification",
    "section": "Testing data ‘test’",
    "text": "Testing data ‘test’\n\n\nCode\n# Test data\ntest = data.drop(index)\n\nshow(test, layout={\"topStart\": None, \"topEnd\": None}, scrollY=\"200px\", scrollCollapse=True, paging=False)\n\n\n\n\n\n\n\n    \n      \n      mpg\n      vs\n    \n    \n      rownames\n      \n      \n    \n  \n\n\n\n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\n\n\nLoading ITables v2.2.3 from the init_notebook_mode cell...\n(need help?)\n\n\n\n\n\n\n\nTable 5: Testing database ‘test’"
  },
  {
    "objectID": "index.html#nb-classification-model-and-its-training",
    "href": "index.html#nb-classification-model-and-its-training",
    "title": "Binary classification",
    "section": "NB classification model and its training",
    "text": "NB classification model and its training\n\n\nCode\n# Naive Bayes\nnb = GaussianNB()\nnb.fit(train[['mpg']], train['vs'])\n\n\nGaussianNB()In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.  GaussianNB?Documentation for GaussianNBiFittedGaussianNB()"
  },
  {
    "objectID": "index.html#testing-the-model",
    "href": "index.html#testing-the-model",
    "title": "Binary classification",
    "section": "Testing the model",
    "text": "Testing the model\n\nClassification result\n\n\nCode\n#  Prediction on test data\npredictions = nb.predict(test[['mpg']])\n\n# Posterior probability\nprobs = nb.predict_proba(test[['mpg']])  \n\n# Generating a df for test results\nwynik = pd.DataFrame({'mpg': test['mpg'], 'test[vs]': test['vs'], 'predicted_class': predictions, 'p(\"0\")':np.round(probs[0:8,0],3), 'p(\"1\")':np.round(probs[0:8,1],3)})\n\nshow(wynik, layout={\"topStart\": None, \"topEnd\": None}, scrollY=\"400px\", scrollCollapse=True, paging=False)\n\n\n\n\n\n\n\n    \n      \n      mpg\n      test[vs]\n      predicted_class\n      p(\"0\")\n      p(\"1\")\n    \n    \n      rownames\n      \n      \n      \n      \n      \n    \n  \n\n\n\n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\n\n\nLoading ITables v2.2.3 from the init_notebook_mode cell...\n(need help?)\n\n\n\n\n\n\n\nTable 6: Results: p(“0”) - probability vs = “0”, p(“1”) - probability vs = “1”\n\n\n\n\n\n\nConfusion matrix\n\n\nCode\nfrom sklearn.metrics import (\n    accuracy_score,\n    cohen_kappa_score,\n    confusion_matrix,\n    ConfusionMatrixDisplay\n)\n\ncm = confusion_matrix(test[['vs']], wynik.predicted_class )\n\ncm = pd.DataFrame(cm)\ncm.rename(columns={0:'predicted: 0',1:'predicted: 1'}, inplace=True) \ncm.rename(index={0:'actual: 0',1:'actual: 1'}, inplace=True)\nshow(cm)\n\n# disp = ConfusionMatrixDisplay(confusion_matrix=cm,\n#                                display_labels=model.classes_)\n# disp.plot() \n\n\n\n\n\n\n\n    \n      \n      predicted: 0\n      predicted: 1\n    \n  \n\n\n\n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\n\n\nLoading ITables v2.2.3 from the init_notebook_mode cell...\n(need help?)\n\n\n\n\n\n\n\nTable 7: Confusion matrix\n\n\n\n\n\n\nAccuracy and kappa\n\n\nCode\naccuracy = accuracy_score(test[['vs']], wynik.predicted_class)\nprint('accuracy = ', np.round(accuracy,3))\n\nkappa = cohen_kappa_score(test[['vs']], wynik.predicted_class)\nprint('kappa = ', np.round(kappa,3))\n\n\naccuracy =  0.857\nkappa =  0.696\n\n\n\n\nCharts\nThe Figure 1 shows the prediction results (green circle) and probabilities, serving as the basis for classification, against the training and test data.\n\n\nCode\npp = predictions\nn = len(test)+1\nppp = \"fig1\"\n\nwykresy_mpg_vs(train,test,test,probs,pp,n,ppp)\n\n\n\n\n\n\n\n\nFigure 1: NB model testing summary chart (green flashing circles are NB classification result)"
  },
  {
    "objectID": "index.html#prediction-on-the-new-data",
    "href": "index.html#prediction-on-the-new-data",
    "title": "Binary classification",
    "section": "Prediction on the new data",
    "text": "Prediction on the new data\n\nNew data\nGenerated new test data posted in Table 8 . The classification summary chart is shown in Figure 2 .\n\n\nCode\n# New data for prediction\nnowe_dane = pd.DataFrame({'mpg': np.arange(10, 31, 5)})\nshow(np.transpose(nowe_dane))\n\n\n\n\n\n\n\n    \n      \n      0\n      1\n      2\n      3\n      4\n    \n  \n\n\n\n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\n\n\nLoading ITables v2.2.3 from the init_notebook_mode cell...\n(need help?)\n\n\n\n\n\n\n\nTable 8: New data\n\n\n\n\n\n\nClassification\n\n\nCode\n# Prediction\npredykcja = nb.predict(nowe_dane[['mpg']])\nprobs = nb.predict_proba(nowe_dane[['mpg']])  # posterior\n\n\n# Generation of a df for new data\nwynik = pd.DataFrame({'mpg': nowe_dane['mpg'], 'predicted_class': predykcja, 'p(\"0\")':np.round(probs[0:5,0],3), 'p(\"1\")':np.round(probs[0:5,1],3)})\n\nshow(wynik, layout={\"topStart\": None, \"topEnd\": None}, scrollY=\"400px\", scrollCollapse=True, paging=False)\n\n\n\n\n\n\n\n    \n      \n      mpg\n      predicted_class\n      p(\"0\")\n      p(\"1\")\n    \n  \n\n\n\n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\n\n\nLoading ITables v2.2.3 from the init_notebook_mode cell...\n(need help?)\n\n\n\n\n\n\n\nTable 9: Classification result for new data\n\n\n\n\n\n\nCharts\n\n\nCode\npp_new = predykcja.astype(int)\nn = len(nowe_dane)\n\nwykresy_mpg_vs(train,test,nowe_dane,probs,pp_new,n,\"fig2\")\n\n\n\n\n\n\n\n\nFigure 2: Summary chart for new data (green flashing circles are NB classification results)"
  },
  {
    "objectID": "index.html#training-of-the-knn-model",
    "href": "index.html#training-of-the-knn-model",
    "title": "Binary classification",
    "section": "Training of the KNN model",
    "text": "Training of the KNN model\n\n\nCode\nfrom sklearn.neighbors import KNeighborsClassifier\n\n# Training\n\nknn = KNeighborsClassifier(n_neighbors=5)\nknn.fit(train[['mpg']], train['vs'])\n\n\nKNeighborsClassifier()In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.  KNeighborsClassifier?Documentation for KNeighborsClassifieriFittedKNeighborsClassifier()"
  },
  {
    "objectID": "index.html#prediction-on-test-data",
    "href": "index.html#prediction-on-test-data",
    "title": "Binary classification",
    "section": "Prediction on test data",
    "text": "Prediction on test data\n\nClassification results\n\n\nCode\n# Prediction\npredictions = knn.predict(test[['mpg']])\n\nprobs = knn.predict_proba(test[['mpg']])  \n\n# Generate test results as df\nwynik = pd.DataFrame({'mpg': test['mpg'], 'test[vs]': test['vs'], 'predicted_class': predictions, 'p(\"0\")':np.round(probs[0:8,0],3), 'p(\"1\")':np.round(probs[0:8,1],3)})\n\nshow(wynik, layout={\"topStart\": None, \"topEnd\": None}, scrollY=\"400px\", scrollCollapse=True, paging=False)\n\n\n\n\n\n\n\n    \n      \n      mpg\n      test[vs]\n      predicted_class\n      p(\"0\")\n      p(\"1\")\n    \n    \n      rownames\n      \n      \n      \n      \n      \n    \n  \n\n\n\n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\n\n\nLoading ITables v2.2.3 from the init_notebook_mode cell...\n(need help?)\n\n\n\n\n\n\n\nTable 10: Result of KNN classification of test data\n\n\n\n\n\n\nConfusion matrix\n\n\nCode\ncm = confusion_matrix(test['vs'], predictions)\n\ncm = pd.DataFrame(cm)\ncm.rename(columns={0:'predictied: 0',1:'predicted: 1'}, inplace=True) \ncm.rename(index={0:'actual: 0',1:'actual: 1'}, inplace=True)\nshow(cm)\n\n\n\n\n\n\n\n    \n      \n      predictied: 0\n      predicted: 1\n    \n  \n\n\n\n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\n\n\nLoading ITables v2.2.3 from the init_notebook_mode cell...\n(need help?)\n\n\n\n\n\n\n\nTable 11: Confusion matrix\n\n\n\n\n\n\nAccuracy and kappa\n\n\nCode\naccuracy = accuracy_score(test[['vs']], wynik.predicted_class)\nprint('accuracy = ', np.round(accuracy,3))\n\nkappa = cohen_kappa_score(test[['vs']], wynik.predicted_class)\nprint('kappa = ', np.round(kappa,3))\n\n\naccuracy =  0.857\nkappa =  0.72\n\n\n\n\nCharts\n\n\nCode\npp = predictions\nn = len(test)+1\n\nwykresy_mpg_vs(train,test,test,probs,pp,n,\"fig3\")\n\n\n\n\n\n\n\n\nFigure 3: Summary chart of KNN model testing (green flashing circles are KNN classification results)"
  },
  {
    "objectID": "index.html#prediction-on-the-new-data-1",
    "href": "index.html#prediction-on-the-new-data-1",
    "title": "Binary classification",
    "section": "Prediction on the new data",
    "text": "Prediction on the new data\n\nNew data\nWe used the test data provided in Table 8 . The classification summary chart is shown in Figure 4 .\n\n\nClassification\n\n\nCode\n# Prediction\npredykcja = knn.predict(nowe_dane[['mpg']])\nprobs = knn.predict_proba(nowe_dane[['mpg']])  # posterior\n\n\n# Generate a df for new data\nwynik = pd.DataFrame({'mpg': nowe_dane['mpg'], 'predicted_class': predykcja, 'p(\"0\")':np.round(probs[0:5,0],3), 'p(\"1\")':np.round(probs[0:5,1],3)})\n\nshow(wynik, layout={\"topStart\": None, \"topEnd\": None}, scrollY=\"400px\", scrollCollapse=True, paging=False)\n\n\n\n\n\n\n\n    \n      \n      mpg\n      predicted_class\n      p(\"0\")\n      p(\"1\")\n    \n  \n\n\n\n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\n\n\nLoading ITables v2.2.3 from the init_notebook_mode cell...\n(need help?)\n\n\n\n\n\n\n\nTable 12: KNN classification result for the new data\n\n\n\n\n\n\nCharts\n\n\nCode\npp_new = predykcja.astype(int)\nn = len(nowe_dane)\n\nwykresy_mpg_vs(train,test,nowe_dane,probs,pp_new,n,\"fig4\")\n\n\n\n\n\n\n\n\nFigure 4: Summary chart for new data (green flashing circles are KNN classification results)"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This is an example of binary classification of NB (Naive Bayes) and KNN (K Neareast Neighbors) in Python.\nThe report was performed in Quarto (Jupyter) in RStudio."
  },
  {
    "objectID": "index_pl.html",
    "href": "index_pl.html",
    "title": "Klasyfikacja binarna",
    "section": "",
    "text": "Klasyfikacja binarna polega na zakwalifikowaniu danych do jednej z dwu istniejących kategorii. Przyporządkowanie to następuje jako wynik działania algorytmu badającego strukturę bazy danych. W przypadku metody Naive Bayes algorytm oparty jest na twierdzeniu Bayesa o prawdopodobieństwie warunkowym. Algorytm KNN (K Neareast Neighbors) klasyfikuje nową daną na podstawie jej podobieństwa do danych zawartych w bazie. Podobieństwo to mierzy się za pomocą odległości od dwu zdefiniowanych kategorii.\nJako podstawę działania wybrano bazę ‘mtcars’."
  },
  {
    "objectID": "index_pl.html#baza-ćwiczebna-data",
    "href": "index_pl.html#baza-ćwiczebna-data",
    "title": "Klasyfikacja binarna",
    "section": "Baza ćwiczebna ‘data’",
    "text": "Baza ćwiczebna ‘data’\n\n\nCode\n# Wybór kolumn \ndata = mtcars[['mpg', 'vs']]\n\nshow(data, layout={\"topStart\": None, \"topEnd\": None},scrollY=\"300px\", scrollCollapse=True, paging=False)\n\n\n\n\n\n\n\n    \n      \n      mpg\n      vs\n    \n    \n      rownames\n      \n      \n    \n  \n\n\n\n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\n\n\nLoading ITables v2.2.3 from the init_notebook_mode cell...\n(need help?)\n\n\n\n\n\n\n\nTable 3: Baza ćwiczebna ‘data’\n\n\n\n\n80% rekordów bazy ‘data’ przeznaczono do nauki modelu, natomiast 20% zachowano w celu przetestowania i oszacowania jego jakości. Losowanie przeprowadzono bez powtórzeń."
  },
  {
    "objectID": "index_pl.html#baza-treningowa-train",
    "href": "index_pl.html#baza-treningowa-train",
    "title": "Klasyfikacja binarna",
    "section": "Baza treningowa ‘train’",
    "text": "Baza treningowa ‘train’\n\n\nCode\nnp.random.seed(7)\n\n# Wybór indeksów bazy treningowej\nindex = np.random.choice(data.index, size=int(0.8 * len(data)), replace=False)\n\n\n# Dane treningowe 'train'\ntrain = data.loc[index]\n\n# Zamiana 'vs' na zmienną kategorialną\ntrain['vs'] = train['vs'].astype('category')\n\nshow(train, layout={\"topStart\": None, \"topEnd\": None},scrollY=\"300px\", scrollCollapse=True, paging=False)\n\n\n\n\n\n\n\n    \n      \n      mpg\n      vs\n    \n    \n      rownames\n      \n      \n    \n  \n\n\n\n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\n\n\nLoading ITables v2.2.3 from the init_notebook_mode cell...\n(need help?)\n\n\n\n\n\n\n\nTable 4: Baza treningowa"
  },
  {
    "objectID": "index_pl.html#baza-testowa-test",
    "href": "index_pl.html#baza-testowa-test",
    "title": "Klasyfikacja binarna",
    "section": "Baza testowa ‘test’",
    "text": "Baza testowa ‘test’\n\n\nCode\n# Dane testowe \ntest = data.drop(index)\n\nshow(test, layout={\"topStart\": None, \"topEnd\": None}, scrollY=\"200px\", scrollCollapse=True, paging=False)\n\n\n\n\n\n\n\n    \n      \n      mpg\n      vs\n    \n    \n      rownames\n      \n      \n    \n  \n\n\n\n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\n\n\nLoading ITables v2.2.3 from the init_notebook_mode cell...\n(need help?)\n\n\n\n\n\n\n\nTable 5: Baza testowa ‘test’"
  },
  {
    "objectID": "index_pl.html#model-klasyfikacji-nb-i-jego-trening",
    "href": "index_pl.html#model-klasyfikacji-nb-i-jego-trening",
    "title": "Klasyfikacja binarna",
    "section": "Model klasyfikacji NB i jego trening",
    "text": "Model klasyfikacji NB i jego trening\n\n\nCode\n# Model Naive Bayes\nnb = GaussianNB()\nnb.fit(train[['mpg']], train['vs'])\n\n\nGaussianNB()In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.  GaussianNB?Documentation for GaussianNBiFittedGaussianNB()"
  },
  {
    "objectID": "index_pl.html#testowanie-modelu",
    "href": "index_pl.html#testowanie-modelu",
    "title": "Klasyfikacja binarna",
    "section": "Testowanie modelu",
    "text": "Testowanie modelu\n\nWynik klasyfikacji\n\n\nCode\n# Predykcja na danych testowych\npredictions = nb.predict(test[['mpg']])\n\n# Prawdopodobieństwo warunkowe (a posteriori) \nprobs = nb.predict_proba(test[['mpg']])  \n\n# Generowanie df dla wyników testowania \nwynik = pd.DataFrame({'mpg': test['mpg'], 'test[vs]': test['vs'], 'predicted_class': predictions, 'p(\"0\")':np.round(probs[0:8,0],3), 'p(\"1\")':np.round(probs[0:8,1],3)})\n\nshow(wynik, layout={\"topStart\": None, \"topEnd\": None}, scrollY=\"400px\", scrollCollapse=True, paging=False)\n\n\n\n\n\n\n\n    \n      \n      mpg\n      test[vs]\n      predicted_class\n      p(\"0\")\n      p(\"1\")\n    \n    \n      rownames\n      \n      \n      \n      \n      \n    \n  \n\n\n\n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\n\n\nLoading ITables v2.2.3 from the init_notebook_mode cell...\n(need help?)\n\n\n\n\n\n\n\nTable 6: Wyniki: p(“0”) - prawdopodobieństwo vs = “0”, p(“1”) - prawdopodobieństwo vs = “1”\n\n\n\n\n\n\nTabela błędów\n\n\nCode\nfrom sklearn.metrics import (\n    accuracy_score,\n    cohen_kappa_score,\n    confusion_matrix,\n    ConfusionMatrixDisplay\n)\n\ncm = confusion_matrix(test[['vs']], wynik.predicted_class )\n\ncm = pd.DataFrame(cm)\ncm.rename(columns={0:'przewidywane: 0',1:'przewidywane: 1'}, inplace=True) \ncm.rename(index={0:'rzeczywiste: 0',1:'rzeczeczywiste: 1'}, inplace=True)\nshow(cm)\n\n# disp = ConfusionMatrixDisplay(confusion_matrix=cm,\n#                                display_labels=model.classes_)\n# disp.plot() \n\n\n\n\n\n\n\n    \n      \n      przewidywane: 0\n      przewidywane: 1\n    \n  \n\n\n\n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\n\n\nLoading ITables v2.2.3 from the init_notebook_mode cell...\n(need help?)\n\n\n\n\n\n\n\nTable 7: Confusion matrix\n\n\n\n\n\n\nDokładność i kappa\n\n\nCode\naccuracy = accuracy_score(test[['vs']], wynik.predicted_class)\nprint('accuracy = ', np.round(accuracy,3))\n\nkappa = cohen_kappa_score(test[['vs']], wynik.predicted_class)\nprint('kappa = ', np.round(kappa,3))\n\n\naccuracy =  0.857\nkappa =  0.696\n\n\n\n\nWykresy\nNa wykresie Figure 1 przedstawiono na tle danych treningowych i testowych wynik przewidywania (zielone kółko) oraz prawdopodobieństwa, służące jako podstawa klasyfikacji.\n\n\n\nCode\npp = predictions\nn = len(test)+1\nppp = \"fig1\"\n\nwykresy_mpg_vs(train,test,test,probs,pp,n,ppp)\n\n\n\n\n\n\n\n\nFigure 1: Wykres zbiorczy testowania modelu NB (zielone migające kółka to wynik klasyfikacji NB)"
  },
  {
    "objectID": "index_pl.html#predykcja-na-nowych-danych",
    "href": "index_pl.html#predykcja-na-nowych-danych",
    "title": "Klasyfikacja binarna",
    "section": "Predykcja na nowych danych",
    "text": "Predykcja na nowych danych\n\nNowe dane\nWygenerowano nowe dane testowe zamieszczone w tab. Table 8 . Wykres zbiorczy klasyfikacji przedstawiono na rys. Figure 2 .\n\n\nCode\n# Nowe dane\nnowe_dane = pd.DataFrame({'mpg': np.arange(10, 31, 5)})\nshow(np.transpose(nowe_dane))\n\n\n\n\n\n\n\n    \n      \n      0\n      1\n      2\n      3\n      4\n    \n  \n\n\n\n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\n\n\nLoading ITables v2.2.3 from the init_notebook_mode cell...\n(need help?)\n\n\n\n\n\n\n\nTable 8: Nowe dane\n\n\n\n\n\n\nKlasyfikacja\n\n\nCode\n# Predykcja\npredykcja = nb.predict(nowe_dane[['mpg']])\nprobs = nb.predict_proba(nowe_dane[['mpg']])  # posterior\n\n\n# Generowanie df dla nowych danych\nwynik = pd.DataFrame({'mpg': nowe_dane['mpg'], 'predicted_class': predykcja, 'p(\"0\")':np.round(probs[0:5,0],3), 'p(\"1\")':np.round(probs[0:5,1],3)})\n\nshow(wynik, layout={\"topStart\": None, \"topEnd\": None}, scrollY=\"400px\", scrollCollapse=True, paging=False)\n\n\n\n\n\n\n\n    \n      \n      mpg\n      predicted_class\n      p(\"0\")\n      p(\"1\")\n    \n  \n\n\n\n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\n\n\nLoading ITables v2.2.3 from the init_notebook_mode cell...\n(need help?)\n\n\n\n\n\n\n\nTable 9: Wynik klasyfikacji dla nowych danych\n\n\n\n\n\n\nWykresy\n\n\nCode\npp_new = predykcja.astype(int)\nn = len(nowe_dane)\n\nwykresy_mpg_vs(train,test,nowe_dane,probs,pp_new,n,\"fig2\")\n\n\n\n\n\n\n\n\nFigure 2: Wykres zbiorczy dla nowych danych (zielone migające kółka to wynik klasyfikacji NB)"
  },
  {
    "objectID": "index_pl.html#trening-modelu-klasyfikacji-knn",
    "href": "index_pl.html#trening-modelu-klasyfikacji-knn",
    "title": "Klasyfikacja binarna",
    "section": "Trening modelu klasyfikacji KNN",
    "text": "Trening modelu klasyfikacji KNN\n\n\nCode\nfrom sklearn.neighbors import KNeighborsClassifier\n\n# Trenowanie modelu\n\nknn = KNeighborsClassifier(n_neighbors=5)\nknn.fit(train[['mpg']], train['vs'])\n\n\nKNeighborsClassifier()In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.  KNeighborsClassifier?Documentation for KNeighborsClassifieriFittedKNeighborsClassifier()"
  },
  {
    "objectID": "index_pl.html#predykcja-na-danych-testowych",
    "href": "index_pl.html#predykcja-na-danych-testowych",
    "title": "Klasyfikacja binarna",
    "section": "Predykcja na danych testowych",
    "text": "Predykcja na danych testowych\n\nWynik klasyfikacji\n\n\nCode\n# Predykcja\npredictions = knn.predict(test[['mpg']])\n\nprobs = knn.predict_proba(test[['mpg']])  \n\n# Generowanie wyników testowania jako df \nwynik = pd.DataFrame({'mpg': test['mpg'], 'test[vs]': test['vs'], 'predicted_class': predictions, 'p(\"0\")':np.round(probs[0:8,0],3), 'p(\"1\")':np.round(probs[0:8,1],3)})\n\nshow(wynik, layout={\"topStart\": None, \"topEnd\": None}, scrollY=\"400px\", scrollCollapse=True, paging=False)\n\n\n\n\n\n\n\n    \n      \n      mpg\n      test[vs]\n      predicted_class\n      p(\"0\")\n      p(\"1\")\n    \n    \n      rownames\n      \n      \n      \n      \n      \n    \n  \n\n\n\n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\n\n\nLoading ITables v2.2.3 from the init_notebook_mode cell...\n(need help?)\n\n\n\n\n\n\n\nTable 10: Wynik klasyfikacji KNN danych testowych\n\n\n\n\n\n\nTabela błędów\n\n\nCode\ncm = confusion_matrix(test['vs'], predictions)\n\ncm = pd.DataFrame(cm)\ncm.rename(columns={0:'przewidywane: 0',1:'przewidywane: 1'}, inplace=True) \ncm.rename(index={0:'rzeczywiste: 0',1:'rzecywiste: 1'}, inplace=True)\nshow(cm)\n\n\n\n\n\n\n\n    \n      \n      przewidywane: 0\n      przewidywane: 1\n    \n  \n\n\n\n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\n\n\nLoading ITables v2.2.3 from the init_notebook_mode cell...\n(need help?)\n\n\n\n\n\n\n\nTable 11: Confusion matrix\n\n\n\n\n\n\nDokładność i kappa\n\n\nCode\naccuracy = accuracy_score(test[['vs']], wynik.predicted_class)\nprint('accuracy = ', np.round(accuracy,3))\n\nkappa = cohen_kappa_score(test[['vs']], wynik.predicted_class)\nprint('kappa = ', np.round(kappa,3))\n\n\naccuracy =  0.857\nkappa =  0.72\n\n\n\n\nWykresy\n\n\nCode\npp = predictions\nn = len(test)+1\n\nwykresy_mpg_vs(train,test,test,probs,pp,n,\"fig3\")\n\n\n\n\n\n\n\n\nFigure 3: Wykres zbiorczy testowania modelu KNN (zielone migające kółka to wynik klasyfikacji KNN)"
  },
  {
    "objectID": "index_pl.html#predykcja-na-nowych-danych-1",
    "href": "index_pl.html#predykcja-na-nowych-danych-1",
    "title": "Klasyfikacja binarna",
    "section": "Predykcja na nowych danych",
    "text": "Predykcja na nowych danych\n\nNowe dane\nWygenerowano nowe dane testowe zamieszczone w tab. Table 8 . Wykres zbiorczy klasyfikacji przedstawiono na rys. Figure 4 .\n\n\nKlasyfikacja\n\n\nCode\n# Predykcja\npredykcja = knn.predict(nowe_dane[['mpg']])\nprobs = knn.predict_proba(nowe_dane[['mpg']])  # posterior\n\n\n# Generowanie df dla nowych danych\nwynik = pd.DataFrame({'mpg': nowe_dane['mpg'], 'predicted_class': predykcja, 'p(\"0\")':np.round(probs[0:5,0],3), 'p(\"1\")':np.round(probs[0:5,1],3)})\n\nshow(wynik, layout={\"topStart\": None, \"topEnd\": None}, scrollY=\"400px\", scrollCollapse=True, paging=False)\n\n\n\n\n\n\n\n    \n      \n      mpg\n      predicted_class\n      p(\"0\")\n      p(\"1\")\n    \n  \n\n\n\n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\n\n\nLoading ITables v2.2.3 from the init_notebook_mode cell...\n(need help?)\n\n\n\n\n\n\n\nTable 12: Wynik klasyfikacji KNN dla nowych danych\n\n\n\n\n\n\nWykresy\n\n\nCode\npp_new = predykcja.astype(int)\nn = len(nowe_dane)\n\nwykresy_mpg_vs(train,test,nowe_dane,probs,pp_new,n,\"fig4\")\n\n\n\n\n\n\n\n\nFigure 4: Wykres zbiorczy dla nowych danych (zielone migające kółka to wynik klasyfikacji KNN)"
  }
]